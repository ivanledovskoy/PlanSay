import re
from datetime import datetime
from dateparser.search import search_dates

word_to_num = {
    # Дни (1-31)
    "пятнадцат": 15, "шестнадцат": 16, "семнадцат": 17, "восемнадцат": 18, "девятнадцат": 19,
    "двадцат": 20, "двадцать перв": 21, "двадцать втор": 22, "двадцать трет": 23,
    "двадцать четверт": 24, "двадцать пят": 25, "двадцать шест": 26,
    "двадцать седьм": 27, "двадцать восьм": 28, "двадцать девят": 29,
    "тридцат": 30, "тридцать перв": 31,
    "перв": 1, "втор": 2, "трет": 3, "четверт": 4, "пят": 5,
    "шест": 6, "седьм": 7, "восьм": 8, "девят": 9, "десят": 10,
    "одиннадцат": 11, "двенадцат": 12, "тринадцат": 13, "четырнадцат": 14,
    
    # Годы (2000-2050)
    "две тысячи": 2000,
    "две тысячи перв": 2001, "две тысячи втор": 2002, "две тысячи трет": 2003,
    "две тысячи четверт": 2004, "две тысячи пят": 2005, "две тысячи шест": 2006,
    "две тысячи седьм": 2007, "две тысячи восьм": 2008, "две тысячи девят": 2009,
    "две тысяч десят": 2010, "две тысяч одиннадцат": 2011, "две тысяч двенадцат": 2012,
    "две тысяч тринадцат": 2013, "две тысяч четырнадцат": 2014, "две тысяч пятнадцат": 2015,
    "две тысяч шестнадцат": 2016, "две тысяч семнадцат": 2017, "две тысяч восемнадцат": 2018,
    "две тысяч девятнадцат": 2019, "две тысяч двадцат": 2020,
    "две тысячи двадцать перв": 2021, "две тысячи двадцать втор": 2022,
    "две тысячи двадцать трет": 2023, "две тысячи двадцать четверт": 2024,
    "две тысячи двадцать пят": 2025, "две тысячи двадцать шест": 2026,
    "две тысячи двадцать седьм": 2027, "две тысячи двадцать восьм": 2028,
    "две тысячи двадцать девят": 2029, "две тысячи тридцат": 2030,
    "две тысячи тридцатать перв": 2031, "две тысячи тридцатать втор": 2032,
    "две тысячи тридцат трет": 2033, "две тысячи тридцат четверт": 2034,
    "две тысячи тридцат пят": 2035, "две тысячи тридцат шест": 2036,
    "две тысячи тридцат седьм": 2037, "две тысячи тридцат восьм": 2038,
    "две тысячи тридцат девят": 2039, "две тысячи сороков": 2040,
    "две тысячи сорок перв": 2041, "две тысячи сорок втор": 2042,
    "две тысячи сорок трет": 2043, "две тысячи сорок четверт": 2044,
    "две тысячи сорок пят": 2045, "две тысячи сорок шест": 2046,
    "две тысячи сорок седьм": 2047, "две тысячи сорок восьм": 2048,
    "две тысячи сорок девят": 2049, "две тысячи пятьдесят": 2050
}

def convert_text_dates(text):
    text = re.sub(
        r"две тысячи(?: двадцать)? (\w+)(?:ого|ое|ой|ый|ая|ые)",
        lambda m: f"{find_number(m.group(0))}",
        text,
        flags=re.IGNORECASE
    )

    text = re.sub(
        r'(\b[а-яё]+)(?:ого|ое|ий|ой|ый|го|ых)',
        lambda m: f"{find_number(m.group(1))}",
        text,
        flags=re.IGNORECASE
    )
    
    text = re.sub(
        r'(\b[а-яё]+\s?[а-яё]*)\s?(?:ого|ое|ий|ой|ый|го|ых)',
        lambda m: f"{find_number(m.group(1))}",
        text,
        flags=re.IGNORECASE
    )
    
    return text


def find_number(word):
    word = word.lower()
    for key in sorted(word_to_num.keys(), key=len, reverse=True):
        if word.startswith(key):
            return word_to_num[key]
    return word


def search_date(note: str):
    settings = {
        'PREFER_DATES_FROM': 'future',
        'RELATIVE_BASE': datetime.now(),
        'RETURN_AS_TIMEZONE_AWARE': True,
        'TIMEZONE': 'Europe/Zurich'
    }
    results = search_dates(note, languages=['ru'], settings=settings)
    if results:
        matched_phrase, parsed_dt = results[0]
        intermediate = note.replace(matched_phrase, '').strip(' ,;.–—')
    else:
        parsed_dt   = None
        intermediate = note.strip() 
    return parsed_dt, intermediate


def clear_note(note: str):
    patterns_to_strip = [
        r'^\s*напомни(?:те)?\s+мне\b',            # «напомни мне», «напомните мне»
        r'^\s*(?:что\s+)?мне\s+нужно\b',          # «мне нужно», «что мне нужно»
        r'^\s*нужно\b',                           # «нужно …» в начале
    ]
    cleaned = note
    for pat in patterns_to_strip:
        cleaned = re.sub(pat, '', cleaned, flags=re.IGNORECASE).strip(' ,;.–—')
    return cleaned


def extract_date_and_text(note: str) -> tuple:
    note = convert_text_dates(note)
    parsed_dt, intermediate = search_date(note)
    cleaned = clear_note(intermediate)
    return parsed_dt, cleaned


if __name__ == "__main__":    
    examples = [
        "напомни мне завтра помочь детективу расследовать дело",
        "напомни мне через неделю, что мне нужно сходить в магазины и собрать комплектующие для пк",
        "через пару дней нужно сходить в поликлинику",
        "напомнить Фреду, что ему нужно сделать задание",
        "я хочу сходить в мгазин в воскресенье",
        "я хочу сходить в мгазин десятого декабря вечер",
        "я хочу сходить в мгазин третий декабря вечер",
        "я хочу сходить в мгазин третий декабря две тысячи двадцать восьмого",
    ]
    
    for note in examples:
        dt, txt = extract_date_and_text(note)
        print("Вход:   ", note)
        print("Дата →", dt)
        print("Текст →", txt, "\n")
